<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>自己动手实现编译器(一) 词法分析</title>
      <link href="/2023/04/13/zi-ji-dong-shou-shi-xian-bian-yi-qi-yi-ci-fa-fen-xi/"/>
      <url>/2023/04/13/zi-ji-dong-shou-shi-xian-bian-yi-qi-yi-ci-fa-fen-xi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 自己动手实现编译器系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编译器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoML Design</title>
      <link href="/2023/04/13/automl-design/"/>
      <url>/2023/04/13/automl-design/</url>
      
        <content type="html"><![CDATA[<h1>AutoML模型算子实现</h1><h2 id="1-模型算子开发指南">1.模型算子开发指南</h2><p>模型算子需实现grid search space(网格搜索空间)、hpo search sapce（贝叶斯搜索空间）、模型参数初始化方法、基学习器初始化方法</p><h3 id="1-1模型接口实现">1.1模型接口实现</h3><ul><li>generate_grid_params：网格搜索空间</li><li>generate_search_space：贝叶斯搜索空间</li><li>generate_base_model：基学习器初始化方法</li><li>load_params：模型参数初始化方法</li></ul><h3 id="1-2模型参数类实现">1.2模型参数类实现</h3><ul><li>基于pydantic库继承BaseModel基类</li><li>定义模型参数</li><li>规范模型默认参数及校验范围</li></ul><h3 id="1-3算子框架源码">1.3算子框架源码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pyspark<span class="token keyword">from</span> hyperopt <span class="token keyword">import</span> STATUS_OK<span class="token punctuation">,</span> SparkTrials<span class="token punctuation">,</span> Trials<span class="token punctuation">,</span> fmin<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> space_eval<span class="token punctuation">,</span> tpe<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml <span class="token keyword">import</span> Pipeline<span class="token punctuation">,</span> PipelineModel<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>evaluation <span class="token keyword">import</span> <span class="token punctuation">(</span>    BinaryClassificationEvaluator<span class="token punctuation">,</span>    MulticlassClassificationEvaluator<span class="token punctuation">,</span>    RegressionEvaluator<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>tuning <span class="token keyword">import</span> CrossValidator<span class="token punctuation">,</span> ParamGridBuilder<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> udf<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">MLBaseModel</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        model_name<span class="token punctuation">,</span>        learning_type<span class="token punctuation">,</span>        is_tune<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        tune_type<span class="token operator">=</span><span class="token string">"grid"</span><span class="token punctuation">,</span>        label_map_dict<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model_params <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>model <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>fitmodel <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>label_map_dict <span class="token operator">=</span> label_map_dict        self<span class="token punctuation">.</span>param_grid <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>search_space <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>estimator <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>base_model <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>trials <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>learning_type <span class="token operator">=</span> learning_type        self<span class="token punctuation">.</span>model_name <span class="token operator">=</span> model_name        self<span class="token punctuation">.</span>is_tune <span class="token operator">=</span> is_tune        self<span class="token punctuation">.</span>tune_type <span class="token operator">=</span> tune_type    <span class="token keyword">def</span> <span class="token function">init_model</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>load_params<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>generate_base_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_search_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>check_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_grid_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>tune_type <span class="token operator">==</span> <span class="token string">"grid"</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>is_tune<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">check_hpo_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>tune_type <span class="token operator">==</span> <span class="token string">"hpo"</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>is_tune<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">check_init</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>model_params <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"model params is not initialized"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_tune <span class="token keyword">and</span> self<span class="token punctuation">.</span>tune_type <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>tune_type <span class="token operator">=</span> <span class="token string">"grid"</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_tune <span class="token keyword">and</span> self<span class="token punctuation">.</span>tune_type <span class="token operator">==</span> <span class="token string">"grid"</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>param_grid <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"please set the model grid params"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_tune <span class="token keyword">and</span> self<span class="token punctuation">.</span>tune_type <span class="token operator">==</span> <span class="token string">"hpo"</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>search_space <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"please set the model search space"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_hpo_search<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_train<span class="token punctuation">(</span>df<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>model <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"model is not initialized"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fitmodel <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        df1 <span class="token operator">=</span> self<span class="token punctuation">.</span>fitmodel<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>df<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>label_map_dict <span class="token operator">!=</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            string_label_map <span class="token operator">=</span> udf<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> self<span class="token punctuation">.</span>label_map_dict<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> StringType<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            df1 <span class="token operator">=</span> df1<span class="token punctuation">.</span>withColumn<span class="token punctuation">(</span>                <span class="token string">"prediction"</span> <span class="token operator">+</span> <span class="token string">"_map"</span><span class="token punctuation">,</span> string_label_map<span class="token punctuation">(</span>df1<span class="token punctuation">[</span><span class="token string">"prediction"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token keyword">return</span> df1    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>fitmodel<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"保存模型失败"</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"please set the model path"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> path <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"please set the model path"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fitmodel <span class="token operator">=</span> PipelineModel<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">load_params</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现模型参数类并初始化        """</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"my_method is not implemented"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">generate_grid_params</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化模型参数搜索空间        """</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"my_method is not implemented"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">generate_search_space</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化模型参数搜索空间        """</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"my_method is not implemented"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@abstractmethod</span>    <span class="token keyword">def</span> <span class="token function">generate_base_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        初始化baseline 模型        """</span>        <span class="token keyword">raise</span> NotImplementedError<span class="token punctuation">(</span><span class="token string">"my_method is not implemented"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_create_estimator</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>learning_type <span class="token operator">==</span> <span class="token string">"Regression"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>estimator <span class="token operator">=</span> RegressionEvaluator<span class="token punctuation">(</span>                labelCol<span class="token operator">=</span><span class="token string">"label"</span><span class="token punctuation">,</span> predictionCol<span class="token operator">=</span><span class="token string">"prediction"</span><span class="token punctuation">,</span> metricName<span class="token operator">=</span><span class="token string">"rmse"</span>            <span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>learning_type <span class="token operator">==</span> <span class="token string">"BinaryClassfication"</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>estimator <span class="token operator">=</span> BinaryClassificationEvaluator<span class="token punctuation">(</span>                labelCol<span class="token operator">=</span><span class="token string">"label"</span><span class="token punctuation">,</span> metricName<span class="token operator">=</span><span class="token string">"areaUnderROC"</span>            <span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>estimator <span class="token operator">=</span> MulticlassClassificationEvaluator<span class="token punctuation">(</span>                labelCol<span class="token operator">=</span><span class="token string">"label"</span><span class="token punctuation">,</span> predictionCol<span class="token operator">=</span><span class="token string">"prediction"</span><span class="token punctuation">,</span> metricName<span class="token operator">=</span><span class="token string">"accuracy"</span>            <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">create_search_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>check_grid_search<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_create_estimator<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>generate_grid_params<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cv <span class="token operator">=</span> CrossValidator<span class="token punctuation">(</span>                estimator<span class="token operator">=</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">,</span>                evaluator<span class="token operator">=</span>self<span class="token punctuation">.</span>estimator<span class="token punctuation">,</span>                estimatorParamMaps<span class="token operator">=</span>self<span class="token punctuation">.</span>param_grid<span class="token punctuation">,</span>                numFolds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>                parallelism<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>            <span class="token punctuation">)</span>            self<span class="token punctuation">.</span>model <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>stages<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>cv<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>check_hpo_search<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_create_estimator<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>generate_search_space<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>model <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>stages<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> df<span class="token punctuation">)</span><span class="token punctuation">:</span>        training_data<span class="token punctuation">,</span> validation_data <span class="token operator">=</span> df<span class="token punctuation">.</span>randomSplit<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">objective</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>            hpt_model <span class="token operator">=</span> self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>            pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>stages<span class="token operator">=</span><span class="token punctuation">[</span>hpt_model<span class="token punctuation">]</span><span class="token punctuation">)</span>            model <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>training_data<span class="token punctuation">)</span>            predictions <span class="token operator">=</span> model<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>validation_data<span class="token punctuation">)</span>            score <span class="token operator">=</span> self<span class="token punctuation">.</span>estimator<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>predictions<span class="token punctuation">)</span>            loss <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1.0</span> <span class="token operator">*</span> score            <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"loss"</span><span class="token punctuation">:</span> loss<span class="token punctuation">,</span> <span class="token string">"status"</span><span class="token punctuation">:</span> STATUS_OK<span class="token punctuation">}</span>        self<span class="token punctuation">.</span>trials <span class="token operator">=</span> Trials<span class="token punctuation">(</span><span class="token punctuation">)</span>        best <span class="token operator">=</span> fmin<span class="token punctuation">(</span>            algo<span class="token operator">=</span>tpe<span class="token punctuation">.</span>suggest<span class="token punctuation">,</span>            fn<span class="token operator">=</span>objective<span class="token punctuation">,</span>            show_progressbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>            max_evals<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>            space<span class="token operator">=</span>self<span class="token punctuation">.</span>search_space<span class="token punctuation">,</span>            trials<span class="token operator">=</span>self<span class="token punctuation">.</span>trials<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        best_params <span class="token operator">=</span> space_eval<span class="token punctuation">(</span>self<span class="token punctuation">.</span>search_space<span class="token punctuation">,</span> best<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>best_params <span class="token operator">=</span> best_params        self<span class="token punctuation">.</span>model <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>stages<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token operator">**</span>best_params<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_train_info</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        trial_loss <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>self<span class="token punctuation">.</span>trials<span class="token punctuation">.</span>losses<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">)</span>        best_ind <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>trial_loss<span class="token punctuation">)</span>        best_loss <span class="token operator">=</span> <span class="token operator">-</span>trial_loss<span class="token punctuation">[</span>best_ind<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best Exact Accuracy %.3f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>best_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best Param:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>best_params<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">to_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            <span class="token string">"model_name:{},learning_type:{},is_tune:{},tune_type:{},params:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>                self<span class="token punctuation">.</span>model_name<span class="token punctuation">,</span>                self<span class="token punctuation">.</span>learning_type<span class="token punctuation">,</span>                self<span class="token punctuation">.</span>is_tune<span class="token punctuation">,</span>                self<span class="token punctuation">.</span>tune_type<span class="token punctuation">,</span>                params<span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4实现例子参考">1.4实现例子参考</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pyspark<span class="token keyword">from</span> hyperopt <span class="token keyword">import</span> STATUS_OK<span class="token punctuation">,</span> SparkTrials<span class="token punctuation">,</span> Trials<span class="token punctuation">,</span> fmin<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> space_eval<span class="token punctuation">,</span> tpe<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> Field<span class="token punctuation">,</span> validator<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>tuning <span class="token keyword">import</span> CrossValidator<span class="token punctuation">,</span> ParamGridBuilder<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> udf<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> xgboost<span class="token punctuation">.</span>spark <span class="token keyword">import</span> SparkXGBClassifier<span class="token keyword">from</span> MLBaseModel <span class="token keyword">import</span> MLBaseModel<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>feature <span class="token keyword">import</span> VectorAssembler<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSessionspark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>df <span class="token operator">=</span> dataset_iris_binomial<span class="token punctuation">(</span>spark<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XgbModelParams</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    xgb模型参数    Parameters    ----------    model_name: str        模型名称    learning_rate: float        学习率    gamma: float        gamma值    max_depth: int        最大深度    n_estimators: int        树个数    reg_alpha: float        L1正则化系数    reg_lambda: float        L2正则化系数    """</span>    learning_rate<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"学习率"</span><span class="token punctuation">)</span>    gamma<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"gamma"</span><span class="token punctuation">)</span>    max_depth<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"最大深度"</span><span class="token punctuation">)</span>    n_estimators<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"树个数"</span><span class="token punctuation">)</span>    reg_alpha<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"L1正则化系数"</span><span class="token punctuation">)</span>    reg_lambda<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"L2正则化系数"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">XgbModel</span><span class="token punctuation">(</span>MLBaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> learning_type<span class="token punctuation">,</span> is_tune<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tune_type<span class="token operator">=</span><span class="token string">"grid"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>__class__<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>            model_name<span class="token punctuation">,</span> learning_type<span class="token punctuation">,</span> is_tune<span class="token operator">=</span>is_tune<span class="token punctuation">,</span> tune_type<span class="token operator">=</span>tune_type        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_grid_params</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>param_grid <span class="token operator">=</span> <span class="token punctuation">(</span>            ParamGridBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>learning_rate<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>reg_alpha<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>n_estimators<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>max_depth<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_search_space</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>search_space <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"n_estimators"</span><span class="token punctuation">:</span> hp<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">"n_estimators"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> hp<span class="token punctuation">.</span>loguniform<span class="token punctuation">(</span><span class="token string">"learning_rate"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">load_params</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model_params <span class="token operator">=</span> XgbModelParams<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_base_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>base_model <span class="token operator">=</span> SparkXGBClassifier<span class="token punctuation">(</span><span class="token operator">**</span>self<span class="token punctuation">.</span>model_params<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dataset_iris_binomial</span><span class="token punctuation">(</span>spark_session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris    df <span class="token operator">=</span> load_iris<span class="token punctuation">(</span>as_frame<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>frame<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"target"</span><span class="token punctuation">:</span> <span class="token string">"label"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> spark_session<span class="token punctuation">.</span>createDataFrame<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    df <span class="token operator">=</span> VectorAssembler<span class="token punctuation">(</span>inputCols<span class="token operator">=</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> outputCol<span class="token operator">=</span><span class="token string">"features"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>transform<span class="token punctuation">(</span>df<span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>label <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">"features"</span><span class="token punctuation">,</span> <span class="token string">"label"</span><span class="token punctuation">)</span>    df<span class="token punctuation">.</span>cache<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df<span class="token comment">##贝叶斯调参数</span>myXgb <span class="token operator">=</span> XgbModel<span class="token punctuation">(</span>model_name<span class="token operator">=</span><span class="token string">"xgb"</span><span class="token punctuation">,</span>                  learning_type<span class="token operator">=</span><span class="token string">"BinaryClassfication"</span><span class="token punctuation">,</span>                  is_tune<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                  tune_type<span class="token operator">=</span><span class="token string">"hpo"</span><span class="token punctuation">)</span>myXgb<span class="token punctuation">.</span>init_model<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>myXgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">)</span>myXgb<span class="token punctuation">.</span>get_train_info<span class="token punctuation">(</span><span class="token punctuation">)</span>myXgb<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">##grid search 调参</span>myXgb1 <span class="token operator">=</span> XgbModel<span class="token punctuation">(</span>model_name<span class="token operator">=</span><span class="token string">"xgb"</span><span class="token punctuation">,</span>                  learning_type<span class="token operator">=</span><span class="token string">"BinaryClassfication"</span><span class="token punctuation">,</span>                  is_tune<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                   tune_type<span class="token operator">=</span><span class="token string">"grid"</span><span class="token punctuation">)</span>myXgb1<span class="token punctuation">.</span>init_model<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>myXgb1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df<span class="token punctuation">)</span>myXgb1<span class="token punctuation">.</span>to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-部分功能实现">2.部分功能实现</h2><h3 id="2-1-svm算子开发">2.1 svm算子开发</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span> ABCMeta<span class="token punctuation">,</span> abstractmethod<span class="token keyword">from</span> time <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pyspark<span class="token keyword">from</span> hyperopt <span class="token keyword">import</span> STATUS_OK<span class="token punctuation">,</span> SparkTrials<span class="token punctuation">,</span> Trials<span class="token punctuation">,</span> fmin<span class="token punctuation">,</span> hp<span class="token punctuation">,</span> space_eval<span class="token punctuation">,</span> tpe<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> Field<span class="token punctuation">,</span> validator<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>tuning <span class="token keyword">import</span> CrossValidator<span class="token punctuation">,</span> ParamGridBuilder<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>functions <span class="token keyword">import</span> udf<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>types <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> xgboost<span class="token punctuation">.</span>spark <span class="token keyword">import</span> SparkXGBClassifier<span class="token keyword">from</span> MLBaseModel <span class="token keyword">import</span> MLBaseModel<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>feature <span class="token keyword">import</span> VectorAssembler<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSession<span class="token keyword">from</span> pyspark<span class="token punctuation">.</span>ml<span class="token punctuation">.</span>classification <span class="token keyword">import</span> LinearSVCModelspark <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span>df <span class="token operator">=</span> dataset_iris_binomial<span class="token punctuation">(</span>spark<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SvmModelParams</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    svm模型参数    Parameters    ----------    maxIter: int    最大迭代次数    regParam:float    正则化系数    """</span>    maxIter<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"最大迭代次数"</span><span class="token punctuation">)</span>    regParam<span class="token punctuation">:</span> <span class="token builtin">float</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ge<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> le<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"正则化系数"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">SvmModel</span><span class="token punctuation">(</span>MLBaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> model_name<span class="token punctuation">,</span> learning_type<span class="token punctuation">,</span> is_tune<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> tune_type<span class="token operator">=</span><span class="token string">"grid"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>__class__<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>            model_name<span class="token punctuation">,</span> learning_type<span class="token punctuation">,</span> is_tune<span class="token operator">=</span>is_tune<span class="token punctuation">,</span> tune_type<span class="token operator">=</span>tune_type        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_grid_params</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>param_grid <span class="token operator">=</span> <span class="token punctuation">(</span>            ParamGridBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>regParam<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>addGrid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_model<span class="token punctuation">.</span>maxIter<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_search_space</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>search_space <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"maxIter"</span><span class="token punctuation">:</span> hp<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token string">"maxIter"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"regParam"</span><span class="token punctuation">:</span> hp<span class="token punctuation">.</span>loguniform<span class="token punctuation">(</span><span class="token string">"regParam"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">load_params</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">**</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>model_params <span class="token operator">=</span> SvmModelParams<span class="token punctuation">(</span><span class="token operator">**</span>params<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">generate_base_model</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>base_model <span class="token operator">=</span> LinearSVCModel<span class="token punctuation">(</span><span class="token operator">**</span>self<span class="token punctuation">.</span>model_params<span class="token punctuation">.</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-模型自动选择功能">2.2 模型自动选择功能</h3><blockquote><p><strong>此功能只体现在模板工作流中</strong></p></blockquote><p>思路：新增一个AutoML算子,该算子包括若干基础模型算子，训练时，并发地执行子模型算子的训练任务即可。该算子需实现</p><ul><li>init():完成初始化子模型任务</li><li>fit():利用ThreadingPoolExecutor处理子模型的训练任务</li><li>_find_best_model():比较子模型优劣，找到最优模型</li><li>save():最优模型保存</li><li>load():最优加载模型</li><li>leaderboard():返回所有子模型的训练信息，包括模型名称，模型参数，训练的AUC、正确率、召回率等</li><li>predict():给定数据进行预测</li></ul><p>后期优化：增加stacking功能，将所有子模型输出当成stacking model的输入，stacking model可以是rf，也可以是NN网络，进行训练。</p><h2 id="3-后期优化及注意事项">3.后期优化及注意事项</h2><ul><li>开发模型算子时，模型参数类<strong>目前不支持str类型</strong>，会导致模型初始化失败，原因是pydantic对str类型处理有bug，会导致传入str类型参数为None。</li><li>算子框架目前未实现训练指标记录功能</li><li>模型可解释性功能很重要，可以调研下</li><li>目前超参数优化只实现了贝叶斯和网格搜索，进化学习、强化学习、元学习在AutoML领域赤手可热，这些方法可以研究下</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AutoML </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OCaml Learn</title>
      <link href="/2023/04/13/ocaml-learn/"/>
      <url>/2023/04/13/ocaml-learn/</url>
      
        <content type="html"><![CDATA[<h1>OCaml如何利用dune来构建项目</h1><h2 id="1-dune创建项目命令">1.dune创建项目命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dune init project my_proj<span class="token builtin class-name">cd</span> my_projopam switch create <span class="token builtin class-name">.</span> <span class="token number">4.14</span>.1 --deps-only --with-test <span class="token parameter variable">-y</span><span class="token builtin class-name">eval</span> <span class="token variable"><span class="token variable">$(</span>opam <span class="token function">env</span><span class="token variable">)</span></span>dune build<span class="token comment"># 更新项目依赖库后，需要执行一下命令</span>opam <span class="token function">install</span> <span class="token builtin class-name">.</span> --deps-only --with-test <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-项目整体结构">2.项目整体结构</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hw<span class="token comment">#项目根目录</span>├── _build<span class="token comment">#项目编译产出结果</span>│   ├── default│   │   ├── META.hw│   │   ├── bin│   │   ├── hw.dune-package│   │   ├── hw.install│   │   ├── hw.opam│   │   ├── lib│   │   └── <span class="token builtin class-name">test</span>│   ├── <span class="token function">install</span>│   │   └── default│   └── log   <span class="token comment">#编译日志</span>├── bin   <span class="token comment">#项目主代码目录</span>│   ├── dune   <span class="token comment">#dune主代码编译配置</span>│   ├── main.ml   <span class="token comment">#项目主代码</span>├── dune-project   <span class="token comment">#dune项目编译配置</span>├── hw.opam   <span class="token comment">#自动生成的依赖配置</span>├── lib   <span class="token comment">#自定义库代码目录</span>│   ├── dune   <span class="token comment">#dune配置</span>│   ├── map.ml   <span class="token comment">#实现文件</span>│   └── map.mli   <span class="token comment">#接口文件</span>└── <span class="token builtin class-name">test</span>                       <span class="token comment">#测试目录</span>    ├── dune    └── hw.ml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-OCaml接口与实现分离的写法">3.OCaml接口与实现分离的写法</h2><p>外部只能访问接口文件，具体实现无需关心。接口文件以mli后缀结尾，实现文件以ml后缀结尾。这里以Map数据结构的实现来讲解：</p><h3 id="3-1-定义接口">3.1 定义接口</h3><pre class="line-numbers language-ocaml" data-language="ocaml"><code class="language-ocaml"><span class="token comment">(* Map.mli *)</span><span class="token keyword">module</span> <span class="token keyword">type</span> OrderedType <span class="token operator">=</span>  <span class="token keyword">sig</span>    <span class="token keyword">type</span> t    <span class="token keyword">val</span> compare<span class="token punctuation">:</span> t <span class="token operator">-&gt;</span> t <span class="token operator">-&gt;</span> int  <span class="token keyword">end</span><span class="token keyword">module</span> <span class="token keyword">type</span> S <span class="token operator">=</span>  <span class="token keyword">sig</span>    <span class="token keyword">type</span> key    <span class="token keyword">type</span> <span class="token operator">!+</span><span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> empty<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> is_empty<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> bool    <span class="token keyword">val</span> mem<span class="token punctuation">:</span>  key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> bool    <span class="token keyword">val</span> add<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> update<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token type-variable function">'a</span> option <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> option<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> singleton<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> remove<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> merge<span class="token punctuation">:</span>          <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> option <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> option <span class="token operator">-&gt;</span> <span class="token type-variable function">'c</span> option<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'c</span> t    <span class="token keyword">val</span> union<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> option<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> compare<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> int    <span class="token keyword">val</span> equal<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> bool    <span class="token keyword">val</span> iter<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> unit<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> unit    <span class="token keyword">val</span> fold<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span>    <span class="token keyword">val</span> for_all<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> bool    <span class="token keyword">val</span> exists<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> bool    <span class="token keyword">val</span> filter<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> filter_map<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> option<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> t    <span class="token keyword">val</span> partition<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">*</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> cardinal<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> int    <span class="token keyword">val</span> bindings<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> list    <span class="token keyword">val</span> min_binding<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> min_binding_opt<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> option    <span class="token keyword">val</span> max_binding<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> max_binding_opt<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> option    <span class="token keyword">val</span> choose<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> choose_opt<span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> option    <span class="token keyword">val</span> split<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">*</span> <span class="token type-variable function">'a</span> option <span class="token operator">*</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> find<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span>    <span class="token keyword">val</span> find_opt<span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> option    <span class="token keyword">val</span> find_first<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> key <span class="token operator">*</span> <span class="token type-variable function">'a</span>    <span class="token keyword">val</span> find_first_opt<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> option    <span class="token keyword">val</span> find_last<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> key <span class="token operator">*</span> <span class="token type-variable function">'a</span>    <span class="token keyword">val</span> find_last_opt<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> bool<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> option    <span class="token keyword">val</span> map<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> t    <span class="token keyword">val</span> mapi<span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'b</span> t    <span class="token keyword">val</span> to_seq <span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> Seq<span class="token punctuation">.</span>t    <span class="token keyword">val</span> to_rev_seq <span class="token punctuation">:</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> Seq<span class="token punctuation">.</span>t    <span class="token keyword">val</span> to_seq_from <span class="token punctuation">:</span> key <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> Seq<span class="token punctuation">.</span>t    <span class="token keyword">val</span> add_seq <span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> Seq<span class="token punctuation">.</span>t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t    <span class="token keyword">val</span> of_seq <span class="token punctuation">:</span> <span class="token punctuation">(</span>key <span class="token operator">*</span> <span class="token type-variable function">'a</span><span class="token punctuation">)</span> Seq<span class="token punctuation">.</span>t <span class="token operator">-&gt;</span> <span class="token type-variable function">'a</span> t  <span class="token keyword">end</span>    <span class="token keyword">module</span> Make <span class="token punctuation">(</span>Ord <span class="token punctuation">:</span> OrderedType<span class="token punctuation">)</span> <span class="token punctuation">:</span> S <span class="token keyword">with</span> <span class="token keyword">type</span> key <span class="token operator">=</span> Ord<span class="token punctuation">.</span>t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接口文件中要放入外界可以访问的资源，例如函数声明，类型定义，常量定义，module type，module factors等，factor可以实现范型。</p><p>OrderedType:map数据结构key的类型</p><p>S:接口</p><p>Make:map数据结构的constructor</p><h3 id="3-2-调用">3.2 调用</h3><pre class="line-numbers language-ocaml" data-language="ocaml"><code class="language-ocaml"><span class="token comment">(* 同级目录调用 *)</span><span class="token keyword">module</span> MyUsers <span class="token operator">=</span> Map<span class="token punctuation">.</span>Make<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token comment">(* main文件中调用 *)</span><span class="token keyword">module</span> MyUsers <span class="token operator">=</span> Lib<span class="token punctuation">.</span>Map<span class="token punctuation">.</span>Make<span class="token punctuation">(</span>String<span class="token punctuation">)</span><span class="token keyword">let</span> m <span class="token operator">=</span> MyUsers<span class="token punctuation">.</span>empty<span class="token keyword">let</span> n <span class="token operator">=</span> MyUsers<span class="token punctuation">.</span>add <span class="token string">"fred"</span> <span class="token string">"sugarplums"</span> m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-实现">3.3 实现</h3><pre class="line-numbers language-ocaml" data-language="ocaml"><code class="language-ocaml"><span class="token comment">(* Map.ml *)</span><span class="token keyword">module</span> <span class="token keyword">type</span> OrderedType <span class="token operator">=</span>  <span class="token keyword">sig</span>    <span class="token keyword">type</span> t    <span class="token keyword">val</span> compare<span class="token punctuation">:</span> t <span class="token operator">-&gt;</span> t <span class="token operator">-&gt;</span> int  <span class="token keyword">end</span><span class="token keyword">module</span> <span class="token keyword">type</span> S <span class="token operator">=</span> <span class="token keyword">sig</span> <span class="token operator">..</span><span class="token punctuation">.</span> <span class="token keyword">end</span><span class="token keyword">module</span> Make<span class="token punctuation">(</span>Ord <span class="token punctuation">:</span> OrderedType<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">struct</span>  <span class="token keyword">type</span> key <span class="token operator">=</span> ord<span class="token punctuation">.</span>t  <span class="token keyword">type</span> <span class="token type-variable function">'a</span> t <span class="token operator">=</span> Empty      <span class="token operator">|</span> Node <span class="token keyword">of</span> <span class="token punctuation">{</span>l<span class="token punctuation">:</span><span class="token type-variable function">'a</span> t<span class="token punctuation">;</span> v<span class="token punctuation">:</span>key<span class="token punctuation">;</span> d<span class="token punctuation">:</span><span class="token type-variable function">'a</span><span class="token punctuation">;</span> r<span class="token punctuation">:</span><span class="token type-variable function">'a</span> t<span class="token punctuation">;</span> h<span class="token punctuation">:</span>int<span class="token punctuation">}</span>  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何你的module要让外界处理None，那么类型系统就需要定义为option，方便外界处理。</p>]]></content>
      
      
      <categories>
          
          <category> Function Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ocaml </tag>
            
            <tag> Function Programming </tag>
            
            <tag> Dune </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑回归</title>
      <link href="/2022/10/28/luo-ji-hui-gui-jiang-jie/"/>
      <url>/2022/10/28/luo-ji-hui-gui-jiang-jie/</url>
      
        <content type="html"><![CDATA[<h1>逻辑回归</h1><h2 id="1-模型介绍">1.模型介绍</h2><p>Logistic Regression 虽然被称为逻辑回归，但其实际上是分类模型，常用于二分类。具有一下三个特点:</p><ul><li>实现简单</li><li>可并行化</li><li>可解释性强</li></ul><h3 id="1-1-模型定义">1.1 模型定义</h3><p>对于0-1分类问题，概率建模如下：<br>$$p(y|x,\theta) =\frac{1}{1+e^{-\theta \cdot x}}$$</p><h3 id="1-2-损失函数推导">1.2 损失函数推导</h3><ul><li>极大似然估计</li><li>交叉熵</li></ul><h4 id="极大似然估计">极大似然估计</h4><blockquote><p>极大似然的原理</p></blockquote><blockquote><p>给定一个概率分布$D$，已知其概率密度函数（连续分布）或概率质量函数（离散分佈）为$f_D$，以及一个分佈参数$\theta$，我们可以从这个分布中抽出一个具有$n$个值的采样$X_1, X_2,\ldots, X_n$，利用$f_D$计算出其似然函数：$\mbox{L}(\theta\mid x_1,\dots,x_n) = f_\theta(x_1,\dots,x_n)$.</p><p>若$D$是离散分布，$f_\theta$即是在参数为$\theta$时观测到这一采样的概率。若其是连续分布，$f_\theta$则为$X_1, X_2,\ldots, X_n$联合分布的概率密度函数在观测值处的取值。一旦我们获得$X_1, X_2,\ldots, X_n$，我们就能求得一个关于$\theta$的估计。最大似然估计会寻找关于$\theta$的最可能的值（即，在所有可能的$\theta$取值中，寻找一个值使这个采样的“可能性”最大化）。从数学上来说，我们可以在$\theta$的所有可能取值中寻找一个值使得似然函数取到最大值。这个使可能性最大的$\widehat{\theta}$值即称为$\theta$的’‘‘最大似然估计’’'。</p><p><strong>注意</strong>:<br><em>这裡的似然函数是指$x_1,x_2,\ldots,x_n$不变时，关于$\theta$的一个函数</em>。<br><em>最大似然估计不一定存在，也不一定唯一</em>。</p></blockquote><p>事件为1发生的概率$p(y=1|x,\theta)=p$ ,事件为0发生的概率 $p(y=0|x,\theta)=1-p$<br>那么事件发生的概率可以写成：$p(y|x,\theta)={p^{y}}\cdot{(1-p)^{1-y}}$<br>利用极大似然估计,似然函数:$L(\theta)=\prod_i p_i(y^i|x^i,\theta)$,为简化求解，取对数似然，有：<br>$$<br>\begin{split}<br>lnL(\theta) &amp;= \sum_i lnp_i(y^i|x^i,\theta) \\<br>&amp;= \sum_i [y^{i}lnp_i + (1-y^i)ln(1-p_i)] \\<br>&amp;= \sum_i [y^{i}ln\frac{p_i}{1-p_i} + ln(1-p_i)] \\<br>&amp;= \sum_i [y^{i}(\theta \cdot x^i) - ln(1 + e^{\theta \cdot x^i})]<br>\end{split}<br>$$<br>最大化似然相当于最小化如下函数：<br>$$<br>\begin{align}<br>J(\theta) &amp;= -\frac{1}{N}lnL(\theta) \\<br>&amp;= -\frac{1}{N} \sum_i [y^{i}(\theta \cdot x^i) - ln(1 + e^{\theta \cdot x^i})]<br>\end{align}<br>$$</p><h4 id="交叉熵">交叉熵</h4><p>K-L散度：衡量两个分布$P,Q$之间的差异<br>$$<br>\begin{align}<br>D_{KL}(P \parallel Q) &amp;= \sum_{x \in \chi }P(x)log\frac{P(x)}{Q(x)} \\<br>&amp;= \sum_{x \in \chi }(P(x)log(P(x))+ P(x)log \frac{1}{Q(x)}) \\<br>&amp;= -H_P+H(P,Q) \\<br>KL散度 &amp;= -熵+ 交叉熵<br>\end{align}<br>$$</p><p>给定经验分布$P(y)$,我们要最小化模型分布$P_\theta(y)$与经验分布差异,即最小化二者的KL散度。回到公式定义，可以看出最小化KL散度等价于最小化交叉熵。交叉熵计算如下：<br>$$<br>\begin{align}<br>H(P(y|x,\theta_0),P_\theta(y|x,\theta)) &amp;= -\sum_{y \in {1,0}}P(y)logP_\theta(y) \\<br>&amp;= -[P(y=1)logP_\theta(y=1)+ (1-P(y=1))log (1-P_\theta(y=1))] \\<br>\end{align}<br>$$<br>通过采样,可以得到经验平均交叉熵:<br>$$<br>\begin{align}<br>\hat{H} &amp;= -\frac{1}{N}\sum_i [y^{i}logp_\theta(y^i) + (1-y^{i})log(1-p_\theta(y^i))] \\<br>\end{align}<br>$$</p><p><strong>我们从两个角度推出了同一个损失函数！</strong></p><h3 id="1-3-问题求解">1.3 问题求解</h3><p>无约束最优化问题：<br>$$<br>\begin{align}<br>\underset{\theta}{argmin}J(\theta)<br>\end{align}<br>$$<br>使用梯度下降算法求解:<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta_i} &amp;= -\frac{1}{N}\sum_i[\frac{\partial y^{i}(\theta \cdot x^i)}{\partial \theta_i} - \frac{ln(1 + e^{\theta \cdot x^i})}{\partial \theta_i}] \\<br>&amp;=-\frac{1}{N}\sum_i y^ix_{i}^{i} + \sum_i \frac{x_{i}^{i}e^{\theta \cdot x^i}}{1+e^{\theta \cdot x^i}} \\<br>&amp;= \frac{1}{N}\sum_i (p_i-y^i)x_{i}^{i}<br>\end{align}<br>$$<br>参数更新公式:<br>$$<br>\begin{align}<br>\theta_{i}^{k+1} = \theta_{i}^{k} - \alpha\frac{\partial J(\theta)}{\partial \theta_i}<br>\end{align}<br>$$</p><h3 id="1-4-讨论">1.4 讨论</h3><ul><li>损失函数可以选择平方损失吗</li><li>极大似然估计与最小化交叉熵有什么联系</li></ul><h3 id="1-5-逻辑回归与在线学习">1.5 逻辑回归与在线学习</h3><h4 id="在线学习">在线学习</h4><p>在线学习 ( OnlineLearning ) 代表了一系列机器学习算法，特点是每来一个样本就能训练，能够根据线上反馈数据，实时快速地进行模型调整，使得模型及时反映线上的变化，提高线上预测的准确率。相比之下，传统的批处理方式需要一次性收集所有数据，新数据到来时重新训练的代价也很大，因而更新周期较长，可扩展性不高。<br>问题：稀疏性不好解决，随机梯度下降无法得到稀疏解(浮点运算，很难出现0值)<br>解决稀疏性的方法</p><ul><li>加入L1正则</li><li>简单截断,当梯度小于某个阈值时，强制归零</li><li>梯度截断</li></ul><p>$$<br>\begin{equation}<br>T(x,\alpha,\theta)=<br>\begin{cases}<br>max(0,x-\alpha)&amp; {x \in [0,\theta]} \\<br>min(0,x+\alpha)&amp; {x \in [-\theta,0]} \\<br>x&amp; {其他} \<br>\end{cases}<br>\end{equation}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 统计机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概述</title>
      <link href="/2022/10/28/cao-zuo-xi-tong-jie-kou/"/>
      <url>/2022/10/28/cao-zuo-xi-tong-jie-kou/</url>
      
        <content type="html"><![CDATA[<h1>1.操作系统概述</h1><p>以分时复用的方式让多个程序可以有效利用计算机的硬件资源，并且相对于程序直接操作硬件资源，通过与操作系统交互间接使用硬件资源的形式更便捷简单。具体地，操作系统以一种称之为 “<strong>_kernel _</strong>”的核心程序方式存在。“<strong>_kernel _</strong>”使用各种 “<strong>_interfaces _</strong>”与用户程序交互，详细过程如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/181100/1632380619378-ee4abf8f-a02c-4ab6-a85f-0628c7c1271f.png#clientId=u7696f5a9-bbf6-4&amp;from=drop&amp;height=185&amp;id=u6d0a0f97&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2021-09-23%20%E4%B8%8B%E5%8D%883.03.32.png&amp;originHeight=264&amp;originWidth=854&amp;originalType=binary&amp;ratio=1&amp;size=82417&amp;status=done&amp;style=none&amp;taskId=uab2c1e8a-d540-449a-91a5-2a1fea0a3d8&amp;width=600" alt="截屏2021-09-23 下午3.03.32.png"></p><h2 id="1-1-进程和内存">1.1 进程和内存</h2><p>这里所讲的进程包括用户空间的内存（instructions，data，stack）和进程状态，“<strong>_kernel _</strong>”使用进程标识符 “<strong>_PID _</strong>”表示进程。进程可以调用接口“<strong>_fork() _</strong>”来创建子进程，子进程完整复制父进程的内存，值得注意的一点是:<strong>二者的内存独立存在，并不共享</strong>。在父进程中 “<strong>_fork() _</strong>”返回子进程的**<em>pid</em><strong>，而在子进程中 “</strong>_fork() _<strong>”返回0，所以我们可以使用这一特点来控制父子进程。进程的结束通过调用 “</strong>_exit() _<strong>”接口来完成，此时进程会释放所占用的系统资源。父子进程之间的通讯能够利用 “</strong>_exit() _<strong>”和 “</strong>_wait() _<strong>”这两个接口配合完成，具体地，在子进程里，将退出状态描述符“0”（成功）或者“1”（失败）利用 “</strong><em>exit(描述符)</em><strong>”传给父进程，父进程通过接口 “</strong>_wait() _<strong>”接受子进程所传递的状态信号，等待子进程执行完成，随后进行异常处理。在 ”</strong>_kernel _<strong>“服务中，有一个特殊的进程处理接口 ”</strong>_exec() _<strong>“。它会直接替换当前进程为指定进程，执行指定进程并且退出，这简化了 “</strong>_shell _**”程序的设计。</p><h2 id="1-2-I-O和文件描述符">1.2 I/O和文件描述符</h2><p>进程的数据传输通过与 “<strong>_kernel _</strong>”抽象出来的数据对象”文件描述符“交互实现。文件描述符具体表示含义如下表所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/181100/1632386973259-5515f7cd-2cf4-4bc0-bb7f-3ec32594d364.png#clientId=u7696f5a9-bbf6-4&amp;from=drop&amp;height=147&amp;id=uecac3f10&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2021-09-23%20%E4%B8%8B%E5%8D%884.49.27.png&amp;originHeight=294&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;size=30959&amp;status=done&amp;style=none&amp;taskId=udc9ca73b-d842-47e1-8960-75a1abd6700&amp;width=247" alt="截屏2021-09-23 下午4.49.27.png"><br>文件描述符<strong>fd</strong>使用 “<strong>_open() _</strong>”接口创建，进程的数据传输通过 “<strong>_read(fd) _</strong>”和 “<strong>_write(fd) _</strong>”接口来完成。I/O重定向指的是将系统默认的输入输出替换为用户指定的输入输出，这种方法可以实现诸如“ls &gt; a.txt”等操作。I/O重定向的实现离不开fork和exec接口分开调用的原则，这使得文件描述符的替换成为了可能。具体地，按照数据流的不同，在子进程中分别关闭对应的I/O，从而实现I/O的复用。下面给出一个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放输出端口</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls wrong\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误信息显示在屏幕上</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子进程正确执行完毕</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls sucess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出成功信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“<strong>_dup(fd) _</strong>”创建当前文件描述符的一份“引用”，<strong>二者共享文件偏移量</strong>。除了fork与dup接口之外，其余任何文件描述符在父子进程中都是独立的。dup的加入，提供了一种显式的端口绑定方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ls &gt; a.txt 2&gt;&amp;1 (2&gt;&amp;1表示标准错误重定向至1输出端口，即将所有信息输出至a.txt）</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放输出端口</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭标准错误</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标准错误信息重定向至a.txt</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls wrong\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误信息显示在屏幕上</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子进程正确执行完毕</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls sucess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出成功信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dup与close的配合使用，也为管道的应用提供了思路。</p><h2 id="1-3-管道">1.3 管道</h2><p>管道有一对双向互通的文件描述符构成，我们向管道一端写入数据，从另一端就可以读出传输数据，结合端口重定向和管道，我们能够实现子进程之间数据的传输：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// cat a.txt | wc</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>argv1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cat a.txt"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>argv1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wc"</span><span class="token punctuation">;</span>argv1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"run cat\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下面4行将标准输出重定向为管道写端，这样执行完exec后，生成的数据会写入管道。</span>  <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/cat"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"run cat fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"run wc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将标准输入重定向为管道读端，等待管道数据输入，之后执行exec命令。</span>  <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bin/wc"</span><span class="token punctuation">,</span> argv1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是：管道各条子命令分布在独立的子进程中，因此管道命令具有并行的特点。</p><h2 id="1-4-文件系统">1.4 文件系统</h2><p>文件系统包含数据文件，目录，硬件文件三部分，对应的接口有 “<strong>_open() _</strong>”, “<strong>_mkdir() _</strong>”, “<strong>_mknod() _</strong>”。一份文件分为文件实体（inode）和文件链接（link），文件实体指的是文件的元信息，例如文件内容、文件的位置、文件长度、文件类型等，文件链接也称为文件名称，一份文件可以有多个名称。对一份文件增加一个名称可以用link()实现，同理，去除一个名称能够用unlink()实现。当文件的链接数为0且无文件描述符引用它时，系统会将其删除，这个机制提供了一种创建临时文件的方法:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/xyz"</span><span class="token punctuation">,</span> O_CREATE<span class="token operator">|</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/tmp/xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-5-练习">1.5 练习</h2><p>完成一个乒乓程序，该程序可以在两个进程间实现字节的双向传输。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> msg<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">ping_pong</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> round<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//parent process write data to child process</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//child process write data to parent process</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|child  process id: %d, recive data: %s"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">write</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|child  process id: %d, send   data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"parent process id: %d, init data: %s, max round num: %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> round<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"------------------round: %d------------------\n"</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|parent process id: %d, send   data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|parent process id: %d, recive data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ping-pong game over\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> round <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">//最大回合数</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ping_pong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"only recive one file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot open %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ping_pong</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下图：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span> ping-pongparent process id: <span class="token number">5</span>, init data: <span class="token string">"hello world"</span>, max round num: <span class="token number">4</span>------------------round: <span class="token number">1</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">2</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">3</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">4</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>ping-pong game over$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + github page 搭建个人博客</title>
      <link href="/2022/10/20/hello/"/>
      <url>/2022/10/20/hello/</url>
      
        <content type="html"><![CDATA[<h1>Hexo + github page 搭建个人博客</h1><h2 id="1-注册github账号">1.注册github账号</h2><p>首先去<a href="https://github.com">github官网</a>注册一个新号,用于托管我们的博客项目。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/20/hello-world/"/>
      <url>/2022/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
