<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逻辑回归</title>
      <link href="/2022/10/28/luo-ji-hui-gui-jiang-jie/"/>
      <url>/2022/10/28/luo-ji-hui-gui-jiang-jie/</url>
      
        <content type="html"><![CDATA[<h1>逻辑回归</h1><h2 id="1-模型介绍">1.模型介绍</h2><p>Logistic Regression 虽然被称为逻辑回归，但其实际上是分类模型，常用于二分类。具有一下三个特点:</p><ul><li>实现简单</li><li>可并行化</li><li>可解释性强</li></ul><h3 id="1-1-模型定义">1.1 模型定义</h3><p>对于0-1分类问题，概率建模如下：<br>$$p(y|x,\theta) =\frac{1}{1+e^{-\theta \cdot x}}$$</p><h3 id="1-2-损失函数推导">1.2 损失函数推导</h3><ul><li>极大似然估计</li><li>交叉熵</li></ul><h4 id="极大似然估计">极大似然估计</h4><blockquote><p>极大似然的原理</p></blockquote><blockquote><p>给定一个概率分布$D$，已知其概率密度函数（连续分布）或概率质量函数（离散分佈）为$f_D$，以及一个分佈参数$\theta$，我们可以从这个分布中抽出一个具有$n$个值的采样$X_1, X_2,\ldots, X_n$，利用$f_D$计算出其似然函数：$\mbox{L}(\theta\mid x_1,\dots,x_n) = f_\theta(x_1,\dots,x_n)$.</p><p>若$D$是离散分布，$f_\theta$即是在参数为$\theta$时观测到这一采样的概率。若其是连续分布，$f_\theta$则为$X_1, X_2,\ldots, X_n$联合分布的概率密度函数在观测值处的取值。一旦我们获得$X_1, X_2,\ldots, X_n$，我们就能求得一个关于$\theta$的估计。最大似然估计会寻找关于$\theta$的最可能的值（即，在所有可能的$\theta$取值中，寻找一个值使这个采样的“可能性”最大化）。从数学上来说，我们可以在$\theta$的所有可能取值中寻找一个值使得似然函数取到最大值。这个使可能性最大的$\widehat{\theta}$值即称为$\theta$的’‘‘最大似然估计’’'。</p><p><strong>注意</strong>:<br><em>这裡的似然函数是指$x_1,x_2,\ldots,x_n$不变时，关于$\theta$的一个函数</em>。<br><em>最大似然估计不一定存在，也不一定唯一</em>。</p></blockquote><p>事件为1发生的概率$p(y=1|x,\theta)=p$ ,事件为0发生的概率 $p(y=0|x,\theta)=1-p$<br>那么事件发生的概率可以写成：$p(y|x,\theta)={p^{y}}\cdot{(1-p)^{1-y}}$<br>利用极大似然估计,似然函数:$L(\theta)=\prod_i p_i(y^i|x^i,\theta)$,为简化求解，取对数似然，有：<br>$$<br>\begin{split}<br>lnL(\theta) &amp;= \sum_i lnp_i(y^i|x^i,\theta) \\<br>&amp;= \sum_i [y^{i}lnp_i + (1-y^i)ln(1-p_i)] \\<br>&amp;= \sum_i [y^{i}ln\frac{p_i}{1-p_i} + ln(1-p_i)] \\<br>&amp;= \sum_i [y^{i}(\theta \cdot x^i) - ln(1 + e^{\theta \cdot x^i})]<br>\end{split}<br>$$<br>最大化似然相当于最小化如下函数：<br>$$<br>\begin{align}<br>J(\theta) &amp;= -\frac{1}{N}lnL(\theta) \\<br>&amp;= -\frac{1}{N} \sum_i [y^{i}(\theta \cdot x^i) - ln(1 + e^{\theta \cdot x^i})]<br>\end{align}<br>$$</p><h4 id="交叉熵">交叉熵</h4><p>K-L散度：衡量两个分布$P,Q$之间的差异<br>$$<br>\begin{align}<br>D_{KL}(P \parallel Q) &amp;= \sum_{x \in \chi }P(x)log\frac{P(x)}{Q(x)} \\<br>&amp;= \sum_{x \in \chi }(P(x)log(P(x))+ P(x)log \frac{1}{Q(x)}) \\<br>&amp;= -H_P+H(P,Q) \\<br>KL散度 &amp;= -熵+ 交叉熵<br>\end{align}<br>$$</p><p>给定经验分布$P(y)$,我们要最小化模型分布$P_\theta(y)$与经验分布差异,即最小化二者的KL散度。回到公式定义，可以看出最小化KL散度等价于最小化交叉熵。交叉熵计算如下：<br>$$<br>\begin{align}<br>H(P(y|x,\theta_0),P_\theta(y|x,\theta)) &amp;= -\sum_{y \in {1,0}}P(y)logP_\theta(y) \\<br>&amp;= -[P(y=1)logP_\theta(y=1)+ (1-P(y=1))log (1-P_\theta(y=1))] \\<br>\end{align}<br>$$<br>通过采样,可以得到经验平均交叉熵:<br>$$<br>\begin{align}<br>\hat{H} &amp;= -\frac{1}{N}\sum_i [y^{i}logp_\theta(y^i) + (1-y^{i})log(1-p_\theta(y^i))] \\<br>\end{align}<br>$$</p><p><strong>我们从两个角度推出了同一个损失函数！</strong></p><h3 id="1-3-问题求解">1.3 问题求解</h3><p>无约束最优化问题：<br>$$<br>\begin{align}<br>\underset{\theta}{argmin}J(\theta)<br>\end{align}<br>$$<br>使用梯度下降算法求解:<br>$$<br>\begin{align}<br>\frac{\partial J(\theta)}{\partial \theta_i} &amp;= -\frac{1}{N}\sum_i[\frac{\partial y^{i}(\theta \cdot x^i)}{\partial \theta_i} - \frac{ln(1 + e^{\theta \cdot x^i})}{\partial \theta_i}] \\<br>&amp;=-\frac{1}{N}\sum_i y^ix_{i}^{i} + \sum_i \frac{x_{i}^{i}e^{\theta \cdot x^i}}{1+e^{\theta \cdot x^i}} \\<br>&amp;= \frac{1}{N}\sum_i (p_i-y^i)x_{i}^{i}<br>\end{align}<br>$$<br>参数更新公式:<br>$$<br>\begin{align}<br>\theta_{i}^{k+1} = \theta_{i}^{k} - \alpha\frac{\partial J(\theta)}{\partial \theta_i}<br>\end{align}<br>$$</p><h3 id="1-4-讨论">1.4 讨论</h3><ul><li>损失函数可以选择平方损失吗</li><li>极大似然估计与最小化交叉熵有什么联系</li></ul><h3 id="1-5-逻辑回归与在线学习">1.5 逻辑回归与在线学习</h3><h4 id="在线学习">在线学习</h4><p>在线学习 ( OnlineLearning ) 代表了一系列机器学习算法，特点是每来一个样本就能训练，能够根据线上反馈数据，实时快速地进行模型调整，使得模型及时反映线上的变化，提高线上预测的准确率。相比之下，传统的批处理方式需要一次性收集所有数据，新数据到来时重新训练的代价也很大，因而更新周期较长，可扩展性不高。<br>问题：稀疏性不好解决，随机梯度下降无法得到稀疏解(浮点运算，很难出现0值)<br>解决稀疏性的方法</p><ul><li>加入L1正则</li><li>简单截断,当梯度小于某个阈值时，强制归零</li><li>梯度截断<br>$$<br>\begin{equation}<br>T(x,\alpha,\theta)=<br>\begin{cases}<br>max(0,x-\alpha)&amp; {x \in [0,\theta]} \\<br>min(0,x+\alpha)&amp; {x \in [-\theta,0]} \\<br>x&amp; {其他} \<br>\end{cases}<br>\end{equation}<br>$$</li></ul>]]></content>
      
      
      <categories>
          
          <category> 统计机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概述</title>
      <link href="/2022/10/28/cao-zuo-xi-tong-jie-kou/"/>
      <url>/2022/10/28/cao-zuo-xi-tong-jie-kou/</url>
      
        <content type="html"><![CDATA[<h1>1.操作系统概述</h1><p>以分时复用的方式让多个程序可以有效利用计算机的硬件资源，并且相对于程序直接操作硬件资源，通过与操作系统交互间接使用硬件资源的形式更便捷简单。具体地，操作系统以一种称之为 “<strong>_kernel _</strong>”的核心程序方式存在。“<strong>_kernel _</strong>”使用各种 “<strong>_interfaces _</strong>”与用户程序交互，详细过程如下图所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/181100/1632380619378-ee4abf8f-a02c-4ab6-a85f-0628c7c1271f.png#clientId=u7696f5a9-bbf6-4&amp;from=drop&amp;height=185&amp;id=u6d0a0f97&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2021-09-23%20%E4%B8%8B%E5%8D%883.03.32.png&amp;originHeight=264&amp;originWidth=854&amp;originalType=binary&amp;ratio=1&amp;size=82417&amp;status=done&amp;style=none&amp;taskId=uab2c1e8a-d540-449a-91a5-2a1fea0a3d8&amp;width=600" alt="截屏2021-09-23 下午3.03.32.png"></p><h2 id="1-1-进程和内存">1.1 进程和内存</h2><p>这里所讲的进程包括用户空间的内存（instructions，data，stack）和进程状态，“<strong>_kernel _</strong>”使用进程标识符 “<strong>_PID _</strong>”表示进程。进程可以调用接口“<strong>_fork() _</strong>”来创建子进程，子进程完整复制父进程的内存，值得注意的一点是:<strong>二者的内存独立存在，并不共享</strong>。在父进程中 “<strong>_fork() _</strong>”返回子进程的**<em>pid</em><strong>，而在子进程中 “</strong>_fork() _<strong>”返回0，所以我们可以使用这一特点来控制父子进程。进程的结束通过调用 “</strong>_exit() _<strong>”接口来完成，此时进程会释放所占用的系统资源。父子进程之间的通讯能够利用 “</strong>_exit() _<strong>”和 “</strong>_wait() _<strong>”这两个接口配合完成，具体地，在子进程里，将退出状态描述符“0”（成功）或者“1”（失败）利用 “</strong><em>exit(描述符)</em><strong>”传给父进程，父进程通过接口 “</strong>_wait() _<strong>”接受子进程所传递的状态信号，等待子进程执行完成，随后进行异常处理。在 ”</strong>_kernel _<strong>“服务中，有一个特殊的进程处理接口 ”</strong>_exec() _<strong>“。它会直接替换当前进程为指定进程，执行指定进程并且退出，这简化了 “</strong>_shell _**”程序的设计。</p><h2 id="1-2-I-O和文件描述符">1.2 I/O和文件描述符</h2><p>进程的数据传输通过与 “<strong>_kernel _</strong>”抽象出来的数据对象”文件描述符“交互实现。文件描述符具体表示含义如下表所示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/181100/1632386973259-5515f7cd-2cf4-4bc0-bb7f-3ec32594d364.png#clientId=u7696f5a9-bbf6-4&amp;from=drop&amp;height=147&amp;id=uecac3f10&amp;margin=%5Bobject%20Object%5D&amp;name=%E6%88%AA%E5%B1%8F2021-09-23%20%E4%B8%8B%E5%8D%884.49.27.png&amp;originHeight=294&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;size=30959&amp;status=done&amp;style=none&amp;taskId=udc9ca73b-d842-47e1-8960-75a1abd6700&amp;width=247" alt="截屏2021-09-23 下午4.49.27.png"><br>文件描述符<strong>fd</strong>使用 “<strong>_open() _</strong>”接口创建，进程的数据传输通过 “<strong>_read(fd) _</strong>”和 “<strong>_write(fd) _</strong>”接口来完成。I/O重定向指的是将系统默认的输入输出替换为用户指定的输入输出，这种方法可以实现诸如“ls &gt; a.txt”等操作。I/O重定向的实现离不开fork和exec接口分开调用的原则，这使得文件描述符的替换成为了可能。具体地，按照数据流的不同，在子进程中分别关闭对应的I/O，从而实现I/O的复用。下面给出一个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放输出端口</span>  <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls wrong\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误信息显示在屏幕上</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子进程正确执行完毕</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls sucess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出成功信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>“<strong>_dup(fd) _</strong>”创建当前文件描述符的一份“引用”，<strong>二者共享文件偏移量</strong>。除了fork与dup接口之外，其余任何文件描述符在父子进程中都是独立的。dup的加入，提供了一种显式的端口绑定方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// ls &gt; a.txt 2&gt;&amp;1 (2&gt;&amp;1表示标准错误重定向至1输出端口，即将所有信息输出至a.txt）</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放输出端口</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭标准错误</span>  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标准错误信息重定向至a.txt</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭文件</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls wrong\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//错误信息显示在屏幕上</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待子进程正确执行完毕</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"ls sucess\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出成功信息</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dup与close的配合使用，也为管道的应用提供了思路。</p><h2 id="1-3-管道">1.3 管道</h2><p>管道有一对双向互通的文件描述符构成，我们向管道一端写入数据，从另一端就可以读出传输数据，结合端口重定向和管道，我们能够实现子进程之间数据的传输：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// cat a.txt | wc</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">*</span>argv1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"cat a.txt"</span><span class="token punctuation">;</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>argv1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"wc"</span><span class="token punctuation">;</span>argv1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"run cat\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下面4行将标准输出重定向为管道写端，这样执行完exec后，生成的数据会写入管道。</span>  <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"/bin/cat"</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"run cat fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"run wc\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将标准输入重定向为管道读端，等待管道数据输入，之后执行exec命令。</span>  <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"bin/wc"</span><span class="token punctuation">,</span> argv1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是：管道各条子命令分布在独立的子进程中，因此管道命令具有并行的特点。</p><h2 id="1-4-文件系统">1.4 文件系统</h2><p>文件系统包含数据文件，目录，硬件文件三部分，对应的接口有 “<strong>_open() _</strong>”, “<strong>_mkdir() _</strong>”, “<strong>_mknod() _</strong>”。一份文件分为文件实体（inode）和文件链接（link），文件实体指的是文件的元信息，例如文件内容、文件的位置、文件长度、文件类型等，文件链接也称为文件名称，一份文件可以有多个名称。对一份文件增加一个名称可以用link()实现，同理，去除一个名称能够用unlink()实现。当文件的链接数为0且无文件描述符引用它时，系统会将其删除，这个机制提供了一种创建临时文件的方法:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/xyz"</span><span class="token punctuation">,</span> O_CREATE<span class="token operator">|</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"/tmp/xyz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-5-练习">1.5 练习</h2><p>完成一个乒乓程序，该程序可以在两个进程间实现字节的双向传输。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> msg<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> p1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token function">ping_pong</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> round<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//parent process write data to child process</span>  <span class="token function">pipe</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//child process write data to parent process</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|child  process id: %d, recive data: %s"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token function">write</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|child  process id: %d, send   data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"parent process id: %d, init data: %s, max round num: %d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> round<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"------------------round: %d------------------\n"</span><span class="token punctuation">,</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">write</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|parent process id: %d, send   data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>p1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"|parent process id: %d, recive data: %s"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ping-pong game over\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>  <span class="token keyword">int</span> round <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">//最大回合数</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">ping_pong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"only recive one file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot open %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ping_pong</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> round<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果如下图：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"hello world"</span> <span class="token operator">|</span> ping-pongparent process id: <span class="token number">5</span>, init data: <span class="token string">"hello world"</span>, max round num: <span class="token number">4</span>------------------round: <span class="token number">1</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">2</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">3</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>------------------round: <span class="token number">4</span>------------------<span class="token operator">|</span>parent process id: <span class="token number">5</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, recive data: <span class="token string">"hello world"</span><span class="token operator">|</span>child  process id: <span class="token number">6</span>, send   data: <span class="token string">"hello world"</span><span class="token operator">|</span>parent process id: <span class="token number">5</span>, recive data: <span class="token string">"hello world"</span>ping-pong game over$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xv6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + github page 搭建个人博客</title>
      <link href="/2022/10/20/hello/"/>
      <url>/2022/10/20/hello/</url>
      
        <content type="html"><![CDATA[<h1>Hexo + github page 搭建个人博客</h1><h2 id="1-注册github账号">1.注册github账号</h2><p>首先去<a href="https://github.com">github官网</a>注册一个新号,用于托管我们的博客项目。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/20/hello-world/"/>
      <url>/2022/10/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
